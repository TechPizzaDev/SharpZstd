name: deploy
on:
  workflow_dispatch: # clickable button in CI manager
  release:
    types: [published] # both release and prerelease

env:
  VCPKG_INSTALLED_DIR: vcpkg_installed
  VCPKG_OVERLAY_PORTS: '${{ github.workspace }}/custom-ports'
  VCPKG_OVERLAY_TRIPLETS: '${{ github.workspace }}/custom-triplets'
  GH_EVENT_PRERELEASE: '${{ github.event.release.prerelease }}'

jobs:

  vcpkg_windows-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: ./.github/workflows/vcpkg
        with:
          triplet: x64-windows
          list_workspace: ${{ vars.ACTIONS_STEP_DEBUG }}
          

  vcpkg_windows-x86:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: ./.github/workflows/vcpkg
        with:
          triplet: x86-windows
          list_workspace: ${{ vars.ACTIONS_STEP_DEBUG }}


  vcpkg_windows-arm64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: ./.github/workflows/vcpkg
        with:
          triplet: arm64-windows
          list_workspace: ${{ vars.ACTIONS_STEP_DEBUG }}


  vcpkg_linux-x64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: ./.github/workflows/vcpkg
        with:
          triplet: x64-linux
          list_workspace: ${{ vars.ACTIONS_STEP_DEBUG }}
        env:
          CFLAGS: "-Xlinker -Bsymbolic"
          LDFLAGS: "-Xlinker -Bsymbolic"


  vcpkg_linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install GNU AArch64 tools
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y     

      - uses: ./.github/workflows/vcpkg
        with:
          triplet: arm64-linux
          list_workspace: ${{ vars.ACTIONS_STEP_DEBUG }}
        env:
          CFLAGS: "-Xlinker -Bsymbolic"
          LDFLAGS: "-Xlinker -Bsymbolic"
      

  vcpkg_osx-x64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: ./.github/workflows/vcpkg
        with:
          triplet: x64-osx
          list_workspace: ${{ vars.ACTIONS_STEP_DEBUG }}
      
      
  vcpkg_osx-arm64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: ./.github/workflows/vcpkg
        with:
          triplet: arm64-osx
          list_workspace: ${{ vars.ACTIONS_STEP_DEBUG }}
        

  pack-nuget:
    name: pack-nuget
    needs:
      - vcpkg_windows-x64
      - vcpkg_windows-x86
      - vcpkg_windows-arm64
      - vcpkg_linux-x64
      - vcpkg_linux-arm64
      - vcpkg_osx-x64
      - vcpkg_osx-arm64

    runs-on: ubuntu-latest
    env:
      OUT_DIR: artifacts/natives
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.OUT_DIR }}/
          
      - name: List $RUNNER_WORKSPACE
        if: ${{ vars.ACTIONS_STEP_DEBUG }}
        run: find $RUNNER_WORKSPACE
        shell: bash
      
      - name: Restore
        run: dotnet restore
        
      - name: Build
        run: dotnet build -c Release --no-restore 
        
      - name: Test
        run: dotnet test -c Release --no-restore --no-build
       
      - name: Pack
        run: dotnet pack -c Release --no-restore --no-build --verbosity normal
        
      - name: Upload Nuget artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pkg.Release
          path: artifacts/pkg/Release/*
          if-no-files-found: error
        
      - name: Nuget Push 
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: artifacts/pkg/Release
        run: dotnet nuget push "*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_TOKEN }} --skip-duplicate
          
      
